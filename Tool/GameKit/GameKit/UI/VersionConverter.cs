// Copyright (c) 2015 fjz13. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.
// Generated by .NET Reflector from C:\Windows\Microsoft.Net\assembly\GAC_MSIL\System.Drawing\v4.0_4.0.0.0__b03f5f7f11d50a3a\System.Drawing.dll
namespace GameKit.UI
{
    using System;
    using System.Collections;
    using System.ComponentModel;
    using System.ComponentModel.Design.Serialization;
    using System.Globalization;
    using System.Reflection;

    public class VersionConverter : TypeConverter
    {
        public override bool CanConvertFrom(ITypeDescriptorContext context, Type sourceType)
        {
            return ((sourceType == typeof(string)) || base.CanConvertFrom(context, sourceType));
        }

        public override bool CanConvertTo(ITypeDescriptorContext context, Type destinationType)
        {
            return ((destinationType == typeof(InstanceDescriptor)) || base.CanConvertTo(context, destinationType));
        }

        public override object ConvertFrom(ITypeDescriptorContext context, CultureInfo culture, object value)
        {
            string str = value as string;
            if (str == null)
            {
                return base.ConvertFrom(context, culture, value);
            }
            Version outVersion;
            Version.TryParse(str, out outVersion);
            return outVersion;

        }

        public override object ConvertTo(ITypeDescriptorContext context, CultureInfo culture, object value, Type destinationType)
        {
            if (destinationType == null)
            {
                throw new ArgumentNullException("destinationType");
            }

            if (value is Version)
            {
                if (destinationType == typeof(string))
                {
                    if (culture == null)
                    {
                        culture = CultureInfo.CurrentCulture;
                    }
                    Version tempVersion = (Version) value;
                    return tempVersion.ToString();
                }
                if (destinationType == typeof(InstanceDescriptor))
                {
                    Version tempVersion = (Version)value;
                    ConstructorInfo constructor = typeof(Version).GetConstructor(new Type[] { typeof(int), typeof(int), typeof(int), typeof(int) });
                    if (constructor != null)
                    {
                        return new InstanceDescriptor(constructor, new object[] { tempVersion.Major, tempVersion.Minor, tempVersion.Build, tempVersion .Revision});
                    }
                }
            }
            return base.ConvertTo(context, culture, value, destinationType);
        }

        public override object CreateInstance(ITypeDescriptorContext context, IDictionary propertyValues)
        {
            if (propertyValues == null)
            {
                throw new ArgumentNullException("propertyValues");
            }
            object obj1 = propertyValues["Major"];
            object obj2 = propertyValues["Minor"];
            object obj3 = propertyValues["Build"];
            object obj4 = propertyValues["Revision"];

            if (((obj1 == null) || (obj2 == null) || (obj3 == null) || (obj4 == null)) || (!(obj1 is int) || !(obj2 is int) || !(obj3 is int) || !(obj4 is int)))
            {
                throw new ArgumentException("PropertyValueInvalidEntry");
            }
            return new Version((int)obj1, (int)obj2, (int)obj3, (int)obj4);
        }

        public override bool GetCreateInstanceSupported(ITypeDescriptorContext context)
        {
            return true;
        }

        public override PropertyDescriptorCollection GetProperties(ITypeDescriptorContext context, object value, Attribute[] attributes)
        {
            return TypeDescriptor.GetProperties(typeof(Version), attributes).Sort(new string[] { "Major", "Minor","Build","Revision" });
        }

        public override bool GetPropertiesSupported(ITypeDescriptorContext context)
        {
            return true;
        }
    }
}
