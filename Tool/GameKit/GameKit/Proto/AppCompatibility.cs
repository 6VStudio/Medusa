// Copyright (c) 2015 fjz13. All rights reserved.
// Use of this source code is governed by a MIT-style
// license that can be found in the LICENSE file.
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from: AppCompatibility.proto
namespace Medusa.CoreProto
{
  [global::System.Serializable, global::ProtoBuf.ProtoContract(Name=@"AppCompatibility")]
  public partial class AppCompatibility : global::ProtoBuf.IExtensible
  {
    public AppCompatibility() {}
    
    private uint _version;
    [global::ProtoBuf.ProtoMember(2, IsRequired = true, Name=@"version", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public uint version
    {
      get { return _version; }
      set { _version = value; }
    }
    private Medusa.CoreProto.AppCompatibility.InitializeOperation _operation;
    [global::ProtoBuf.ProtoMember(1, IsRequired = true, Name=@"operation", DataFormat = global::ProtoBuf.DataFormat.TwosComplement)]
    public Medusa.CoreProto.AppCompatibility.InitializeOperation operation
    {
      get { return _operation; }
      set { _operation = value; }
    }
    [global::ProtoBuf.ProtoContract(Name=@"InitializeOperation")]
    public enum InitializeOperation
    {
            
      [global::ProtoBuf.ProtoEnum(Name=@"None", Value=0)]
      None = 0,
            
      [global::ProtoBuf.ProtoEnum(Name=@"RemoveAllCache", Value=1)]
      RemoveAllCache = 1
    }
  
    private global::ProtoBuf.IExtension extensionObject;
    global::ProtoBuf.IExtension global::ProtoBuf.IExtensible.GetExtensionObject(bool createIfMissing)
      { return global::ProtoBuf.Extensible.GetExtensionObject(ref extensionObject, createIfMissing); }
  }
  
}