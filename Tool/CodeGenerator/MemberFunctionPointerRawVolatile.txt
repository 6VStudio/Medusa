template <typename T,typename S, typename T1> struct IsMemberFunction<T (S::*)( T1) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2> struct IsMemberFunction<T (S::*)( T1, T2) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3> struct IsMemberFunction<T (S::*)( T1, T2, T3) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3, typename T4> struct IsMemberFunction<T (S::*)( T1, T2, T3, T4) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3, typename T4, typename T5> struct IsMemberFunction<T (S::*)( T1, T2, T3, T4, T5) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6> struct IsMemberFunction<T (S::*)( T1, T2, T3, T4, T5, T6) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7> struct IsMemberFunction<T (S::*)( T1, T2, T3, T4, T5, T6, T7) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8> struct IsMemberFunction<T (S::*)( T1, T2, T3, T4, T5, T6, T7, T8) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9> struct IsMemberFunction<T (S::*)( T1, T2, T3, T4, T5, T6, T7, T8, T9) volatile> { const static bool Value=true; };
template <typename T,typename S, typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename T8, typename T9, typename T10> struct IsMemberFunction<T (S::*)( T1, T2, T3, T4, T5, T6, T7, T8, T9, T10) volatile> { const static bool Value=true; };
